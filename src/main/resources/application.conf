akka {
  actor {
    allow-java-serialization = true # Für Akka-Interne Messages wie akka.actor.ActorSelectionMessage

    provider = "cluster"

      # Routing mit Scatter-Gather und verteilten Routees auch mittels konfigurativem Deployment möglich
//    deployment {
//      /routing/router/routerWorker {
//        router = scatter-gather-group
//        routees.paths = ["/user/routing/worker"]
//        within = 2 seconds
//        cluster {
//          enabled = on
//          allow-local-routees = off
//        }
//      }
//    }
  }
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "debug"
  stdout-loglevel = "debug"

  remote.netty.tcp {
    port = 2552
    hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = ["akka.tcp://fast-failover@127.0.0.1:2552"]

    # Hier kann failure-detector toleranter eingestellt werden:
    # z.B. Threshold vergrössern bedeutet mehr "false-positives" bis ein Node als "unreachable" taxiert wird
    failure-detector {
      threshold = 5
      min-std-deviation = 200 ms
      acceptable-heartbeat-pause = 5 seconds
    }

    allow-weakly-up-members = on
    log-info = on # Cluster Infos wie State, Cluster-Events ("Joining", "Removing", "up" und "down") etc.
  }

  # Discovery: Akka-Nodes werden mit DNS gefunden. Dafür wird in Openshift der Kubernetes-DNS verwendet (via SDN)
  # Lokal über definierte Seed-Nodes (in application.conf, System-Properties, Env-Variablen oder JVM Args)
  # Docs: https://developer.lightbend.com/docs/akka-management/current/bootstrap/index.html
  discovery.method = akka-dns

  # JVM nach shutdown stoppen, damit Openshift die App neu startet.
  coordinated-shutdown.exit-jvm = on
}

